{{ 'component-card.css' | asset_url | stylesheet_tag }}

<style>
.gift-guide-grid {
  padding: 4rem 2rem;
  max-width: 1400px;
  margin: 0 auto;
}

.gift-guide-grid__title {
  font-size: 2rem;
  text-align: center;
  margin-bottom: 3rem;
}

.gift-guide-grid__container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2rem;
}

.gift-guide-product {
  position: relative;
  cursor: pointer;
}

.gift-guide-product__image {
  width: 100%;
  height: 400px;
  object-fit: cover;
}

.gift-guide-product__quick-add {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: #fff;
  border: none;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
}

.gift-guide-popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.gift-guide-popup__content {
  background: #fff;
  padding: 2rem;
  max-width: 500px;
  width: 90%;
  position: relative;
  max-height: 90vh;
  overflow-y: auto;
}

.gift-guide-popup__close {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: none;
  border: none;
  cursor: pointer;
  font-size: 1.5rem;
}

.gift-guide-popup__title {
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

.gift-guide-popup__price {
  font-size: 1.25rem;
  margin-bottom: 1rem;
}

.gift-guide-popup__description {
  margin-bottom: 2rem;
}

.gift-guide-popup__variants {
  margin-bottom: 2rem;
}

.gift-guide-popup__variant-label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
}

.gift-guide-popup__variant-select {
  width: 100%;
  padding: 0.5rem;
  margin-bottom: 1rem;
}

.gift-guide-popup__add-to-cart {
  width: 100%;
  padding: 1rem;
  background: #000;
  color: #fff;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  transition: all 0.3s ease;
}

.gift-guide-popup__add-to-cart:hover {
  background: #FFD700;
  color: #000;
}

@media screen and (max-width: 968px) {
  .gift-guide-grid__container {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media screen and (max-width: 568px) {
  .gift-guide-grid__container {
    grid-template-columns: 1fr;
  }
  
  .gift-guide-grid {
    padding: 2rem 1rem;
  }
}
</style>

<div class="gift-guide-grid">
  <h2 class="gift-guide-grid__title">{{ section.settings.title }}</h2>
  <div class="gift-guide-grid__container">
    {%- for block in section.blocks -%}
      {%- assign product = all_products[block.settings.product] -%}
      <div class="gift-guide-product" data-product-id="{{ product.id }}">
        <img
          src="{{ product.featured_image | img_url: '600x' }}"
          alt="{{ product.title }}"
          class="gift-guide-product__image"
          loading="lazy"
        >
        <button class="gift-guide-product__quick-add" aria-label="Quick view">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M12 5v14M5 12h14"/>
          </svg>
        </button>
      </div>
    {%- endfor -%}
  </div>
</div>

<div class="gift-guide-popup" role="dialog" aria-modal="true">
  <div class="gift-guide-popup__content">
    <button class="gift-guide-popup__close" aria-label="Close">Ã—</button>
    <h3 class="gift-guide-popup__title"></h3>
    <div class="gift-guide-popup__price"></div>
    <div class="gift-guide-popup__description"></div>
    <div class="gift-guide-popup__variants"></div>
    <button class="gift-guide-popup__add-to-cart">
      ADD TO CART
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M5 12h14M12 5l7 7-7 7"/>
      </svg>
    </button>
  </div>
</div>

<script>
  class GiftGuideProduct {
    constructor() {
      this.popup = document.querySelector('.gift-guide-popup');
      this.popupContent = this.popup.querySelector('.gift-guide-popup__content');
      this.closeButton = this.popup.querySelector('.gift-guide-popup__close');
      this.addToCartButton = this.popup.querySelector('.gift-guide-popup__add-to-cart');
      
      this.init();
    }

    init() {
      this.bindEvents();
    }

    bindEvents() {
      document.querySelectorAll('.gift-guide-product').forEach(product => {
        product.addEventListener('click', (e) => this.handleProductClick(e));
      });

      this.closeButton.addEventListener('click', () => this.closePopup());
      this.addToCartButton.addEventListener('click', () => this.handleAddToCart());
      
      this.popup.addEventListener('click', (e) => {
        if (e.target === this.popup) this.closePopup();
      });
    }

    async handleProductClick(e) {
      const productId = e.currentTarget.dataset.productId;
      const response = await fetch(`/products/${productId}.js`);
      const product = await response.json();
      
      this.currentProduct = product;
      this.renderPopup(product);
      this.openPopup();
    }

    renderPopup(product) {
      this.popupContent.querySelector('.gift-guide-popup__title').textContent = product.title;
      this.popupContent.querySelector('.gift-guide-popup__price').textContent = 
        this.formatMoney(product.price);
      this.popupContent.querySelector('.gift-guide-popup__description').innerHTML = 
        product.description;

      this.renderVariants(product);
    }

    renderVariants(product) {
      const variantsContainer = this.popupContent.querySelector('.gift-guide-popup__variants');
      variantsContainer.innerHTML = '';

      product.options_with_values.forEach(option => {
        const container = document.createElement('div');
        
        const label = document.createElement('label');
        label.className = 'gift-guide-popup__variant-label';
        label.textContent = option.name;
        
        const select = document.createElement('select');
        select.className = 'gift-guide-popup__variant-select';
        select.dataset.option = option.name.toLowerCase();
        
        option.values.forEach(value => {
          const optionElement = document.createElement('option');
          optionElement.value = value;
          optionElement.textContent = value;
          select.appendChild(optionElement);
        });

        container.appendChild(label);
        container.appendChild(select);
        variantsContainer.appendChild(container);
      });
    }

    async handleAddToCart() {
      const variantSelects = this.popupContent.querySelectorAll('.gift-guide-popup__variant-select');
      const selectedOptions = Array.from(variantSelects).map(select => ({
        name: select.dataset.option,
        value: select.value
      }));

      const selectedVariant = this.currentProduct.variants.find(variant => 
        selectedOptions.every(option => 
          variant[`option${option.name.match(/\d+/) || 1}`] === option.value
        )
      );

      if (!selectedVariant) return;

      try {
        await this.addItemToCart(selectedVariant.id, 1);
        
        // Check if we need to add the Soft Winter Jacket
        if (selectedOptions.some(option => 
          (option.value === 'Black' || option.value === 'Medium')
        )) {
          const winterJacket = {{ section.settings.winter_jacket_variant_id }};
          if (winterJacket) {
            await this.addItemToCart(winterJacket, 1);
          }
        }

        this.closePopup();
        // Trigger cart drawer open or notification
        document.dispatchEvent(new CustomEvent('cart:refresh'));
      } catch (error) {
        console.error('Error adding to cart:', error);
      }
    }

    async addItemToCart(variantId, quantity) {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: variantId,
          quantity: quantity
        })
      });

      if (!response.ok) throw new Error('Failed to add item to cart');
      return response.json();
    }

    formatMoney(cents) {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
      }).format(cents / 100);
    }

    openPopup() {
      this.popup.style.display = 'flex';
      document.body.style.overflow = 'hidden';
    }

    closePopup() {
      this.popup.style.display = 'none';
      document.body.style.overflow = '';
    }
  }

  // Initialize the gift guide functionality
  window.addEventListener('DOMContentLoaded', () => {
    new GiftGuideProduct();
  });
</script>

{% schema %}
{
  "name": "Gift Guide Grid",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Tisso vision in the wild"
    },
    {
      "type": "product",
      "id": "winter_jacket",
      "label": "Soft Winter Jacket Product"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Gift Guide Grid",
      "blocks": [
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        }
      ]
    }
  ]
}
{% endschema %}
