{% schema %}
{
  "name": "Product Grid with Popup",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Tisso vision in the wild"
    },
    {
      "type": "product",
      "id": "winter_jacket",
      "label": "Soft Winter Jacket Product (Auto-add for Black/Medium)"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Product Grid with Popup",
      "blocks": [
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        }
      ]
    }
  ]
}
{% endschema %}

<style>
@import url('https://fonts.googleapis.com/css2?family=Jost:wght@400;500;600&display=swap');

.product-grid {
  padding: 60px 20px;
  max-width: 1440px;
  margin: 0 auto;
  font-family: 'Jost', sans-serif;
}

.product-grid__title {
  font-family: 'Jost', sans-serif;
  font-size: 36px;
  font-weight: 500;
  margin-bottom: 40px;
  text-align: center;
  color: #000;
}

.product-grid__items {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}

.product-item {
  position: relative;
  overflow: hidden;
  cursor: pointer;
  background: #fff;
  border-radius: 8px;
}

.product-item__image {
  width: 100%;
  height: 500px;
  object-fit: cover;
  transition: transform 0.3s ease;
  display: block;
}

.product-item:hover .product-item__image {
  transform: scale(1.05);
}

.product-item__info {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: linear-gradient(transparent, rgba(0,0,0,0.8));
  color: white;
  padding: 30px 20px 20px;
  transform: translateY(100%);
  transition: transform 0.3s ease;
}

.product-item:hover .product-item__info {
  transform: translateY(0);
}

.product-item__title {
  font-size: 18px;
  font-weight: 500;
  margin-bottom: 8px;
}

.product-item__price {
  font-size: 16px;
  margin-bottom: 15px;
}

.quick-view-button {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 60px;
  height: 60px;
  background: rgba(255, 255, 255, 0.95);
  border: 2px solid #000;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  z-index: 10;
  opacity: 0;
  visibility: hidden;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
}

.product-item:hover .quick-view-button {
  opacity: 1;
  visibility: visible;
}

.quick-view-button:hover {
  background: #FFF544;
  transform: translate(-50%, -50%) scale(1.15);
  box-shadow: 0 6px 25px rgba(0, 0, 0, 0.4);
}

.quick-view-button:active {
  transform: translate(-50%, -50%) scale(1.05);
}

.quick-view-button svg {
  width: 28px;
  height: 28px;
  stroke: #000;
  stroke-width: 2.5;
  transition: stroke 0.2s ease;
}

.quick-view-button:hover svg {
  stroke: #000;
}

/* Popup Styles */
.product-popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0, 0, 0, 0.8);
  z-index: 999999;
  display: none;
  align-items: center;
  justify-content: center;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.product-popup-overlay.active {
  display: flex !important;
  opacity: 1 !important;
  visibility: visible !important;
}

.product-popup {
  background: #FFFFFF;
  width: 311px;
  height: 447px;
  border-radius: 0;
  box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.5);
  font-family: 'Jost', sans-serif;
  position: relative;
  transform: scale(0.8);
  transition: transform 0.3s ease;
  overflow: visible;
  z-index: 1000000;
}

.product-popup-overlay.active .product-popup {
  transform: scale(1);
}

.product-popup__header {
  position: relative;
  padding: 0;
  border-bottom: none;
  height: 140px;
}

.product-popup__close {
  position: absolute;
  top: 12px;
  right: 12px;
  background: rgba(248, 248, 248, 0.9);
  border: 1.5px solid #000000;
  width: 12px;
  height: 12px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 0;
  transition: background 0.3s ease;
  color: #000;
  font-size: 8px;
  transform: rotate(45deg);
}

.product-popup__close::before {
  content: '+';
  transform: rotate(0deg);
}

.product-popup__close:hover {
  background: #f0f0f0;
}

.product-popup__image {
  position: absolute;
  left: 17px;
  top: 36px;
  right: 174px;
  bottom: 271px;
  background-size: cover;
  background-position: center;
}

.product-popup__title {
  position: absolute;
  left: 145px;
  top: 49px;
  right: 30px;
  font-family: 'Jost';
  font-weight: 300;
  font-size: 16px;
  line-height: 120%;
  color: #000000;
  margin: 0;
  padding-right: 0;
}

.product-popup__price {
  position: absolute;
  left: 145px;
  top: 88px;
  font-family: 'Lustria';
  font-weight: 400;
  font-size: 16px;
  line-height: 120%;
  color: #000000;
}

.product-popup__body {
  padding: 0;
  position: relative;
  height: calc(100% - 140px);
}

.product-popup__description {
  position: absolute;
  width: 146px;
  height: 60px;
  left: calc(50% - 146px/2 + 62.5px);
  top: 150px;
  font-family: 'Jost';
  font-weight: 300;
  font-size: 14px;
  line-height: 110%;
  letter-spacing: -0.01em;
  color: #000000;
  margin: 0;
  display: none; /* Hide description for now to match Figma */
}

.product-popup__variants {
  margin: 0;
  position: absolute;
  top: 145px;
  left: 20px;
  right: 20px;
}

.variant-group {
  margin-bottom: 20px;
  position: relative;
}

/* Added size dropdown list styles */
.size-selector { 
  position: absolute; 
  height: auto; 
  left: 17px; 
  right: 174px; 
  top: 250px; 
  z-index: 10;
}
.size-selector.open .size-selector__dropdown { 
  border-bottom-color: transparent; 
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}
.size-selector__dropdown { 
  position: relative; 
  width: 100%; 
  height: 40px; 
  border: 0.5px solid #000000; 
  background: #FFFFFF; 
  cursor: pointer; 
  display: flex; 
  align-items: center; 
  padding: 0 12px; 
  box-sizing: border-box;
  border-radius: 0;
  transition: all 0.2s ease;
}
.size-selector__dropdown:hover {
  background: #f8f8f8;
  border-color: #333;
}
.size-selector.open .size-selector__dropdown {
  border-bottom-color: transparent;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  background: #fafafa;
}
.size-selector__label { 
  font-family: 'Jost'; 
  font-weight: 400; 
  font-size: 14px; 
  line-height: 130%; 
  color: #333333; 
  position: absolute; 
  top: -18px; 
  left: 0; 
}
.size-selector__selected { 
  font-family: 'Jost'; 
  font-weight: 400; 
  font-size: 16px; 
  line-height: 100%; 
  letter-spacing: -0.02em; 
  color: #000000; 
  flex: 1; 
}
.size-selector__arrow { 
  width: 0; 
  height: 0; 
  border-left: 5px solid transparent; 
  border-right: 5px solid transparent; 
  border-top: 7px solid #000000; 
  margin-left: 8px; 
  transition: transform 0.3s ease; 
}
.size-selector.open .size-selector__arrow { 
  transform: rotate(180deg); 
}
.size-selector__list { 
  position: absolute; 
  left: 0; 
  top: 39px; 
  width: 100%; 
  background: #FFFFFF; 
  border: 0.5px solid #000; 
  border-top: none;
  box-sizing: border-box; 
  max-height: 160px; 
  overflow-y: auto; 
  display: none; 
  z-index: 100;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}
.size-selector.open .size-selector__list { 
  display: block; 
  animation: slideDown 0.2s ease-out;
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-5px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
.size-selector__item { 
  width: 100%; 
  height: 40px; 
  background: #FFFFFF; 
  color: #000; 
  font-family: 'Jost'; 
  font-weight: 400; 
  font-size: 16px; 
  line-height: 100%; 
  letter-spacing: -0.02em; 
  display: flex; 
  align-items: center; 
  justify-content: center; 
  border: none; 
  cursor: pointer; 
  padding: 0;
  transition: all 0.2s ease;
}
.size-selector__item:hover {
  background: #f5f5f5;
  transform: translateX(2px);
}
.size-selector__item + .size-selector__item { 
  border-top: 0.5px solid #eee; 
}
.size-selector__item.selected { 
  background: #000; 
  color: #FFF; 
  font-weight: 500;
}
.size-selector__item.selected:hover { 
  background: #333; 
  transform: none;
}

.variant-group__label {
  font-family: 'Jost';
  font-weight: 400;
  font-size: 14px;
  line-height: 130%;
  color: #333333;
  margin: 0 0 8px 0;
  text-transform: none;
  letter-spacing: normal;
}

.variant-group__options {
  display: flex;
  gap: 0;
  position: relative;
}

.variant-option {
  padding: 0;
  border: 0.5px solid #000000;
  background: #FFFFFF;
  color: #000000;
  cursor: pointer;
  transition: all 0.3s ease;
  font-family: 'Jost';
  font-weight: 400;
  font-size: 18px;
  line-height: 100%;
  letter-spacing: -0.02em;
  text-transform: capitalize;
  border-radius: 0;
  min-width: auto;
  text-align: left;
  height: 25px;
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
}

.variant-option:first-child {
  width: calc(50% - 1px);
  padding-left: 14px;
  justify-content: flex-start;
}

.variant-option:last-child {
  width: 50%;
  margin-left: -0.5px;
  padding-left: 14px;
  justify-content: flex-start;
}

.variant-option.selected {
  background: #000000;
  color: #FFFFFF;
}

/* Size selector */
.size-selector {
  position: absolute;
  height: auto;
  left: 17px;
  right: 174px;
  top: 250px;
  z-index: 10;
}

.size-selector__dropdown {
  position: relative;
  width: 100%;
  height: 40px;
  border: 0.5px solid #000000;
  background: #FFFFFF;
  cursor: pointer;
  display: flex;
  align-items: center;
  padding: 0 12px;
  box-sizing: border-box;
  border-radius: 0;
}

.size-selector__label {
  font-family: 'Jost';
  font-weight: 400;
  font-size: 14px;
  line-height: 130%;
  color: #333333;
  position: absolute;
  top: -18px;
  left: 0;
}

.size-selector__selected {
  font-family: 'Jost';
  font-weight: 400;
  font-size: 16px;
  line-height: 100%;
  letter-spacing: -0.02em;
  color: #000000;
  flex: 1;
}

.size-selector__arrow {
  width: 0;
  height: 0;
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-top: 7px solid #000000;
  margin-left: 8px;
  transition: transform .2s;
}

.product-popup__add-to-cart {
  position: absolute;
  width: 271px;
  height: 45px;
  left: 20px;
  bottom: 25px;
  background: #000000;
  border: none;
  font-family: 'Jost';
  font-weight: 400;
  font-size: 16px;
  line-height: 20px;
  text-transform: uppercase;
  color: #FFFFFF;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  box-sizing: border-box;
}

.product-popup__add-to-cart:hover {
  background: #FFF544;
  color: #000;
}

.product-popup__add-to-cart:disabled {
  background: #ccc;
  cursor: not-allowed;
}

.product-popup__add-to-cart svg {
  width: 18px;
  height: 18px;
}

/* Loading State */
.product-popup__loading {
  display: none;
  text-align: center;
  padding: 40px;
  color: #666;
}

.product-popup__loading.active {
  display: block;
}

/* Responsive Design */
@media screen and (max-width: 968px) {
  .product-grid__items {
    grid-template-columns: repeat(2, 1fr);
    gap: 15px;
  }
  
  .product-item__image {
    height: 400px;
  }
  
  .product-popup {
    width: 95%;
    max-width: 400px;
  }
  
  .product-popup__header,
  .product-popup__body {
    padding: 25px;
  }
  
  .product-popup__title {
    font-size: 24px;
  }
}

@media screen and (max-width: 568px) {
  .product-grid__items {
    grid-template-columns: 1fr;
  }
  
  .product-grid {
    padding: 40px 15px;
  }
  
  .product-grid__title {
    font-size: 28px;
    margin-bottom: 30px;
  }
  
  .product-item__image {
    height: 350px;
  }
  
  .quick-view-button {
    opacity: 1;
    visibility: visible;
    width: 50px;
    height: 50px;
  }
  
  .quick-view-button svg {
    width: 24px;
    height: 24px;
  }
  
  .product-popup {
    width: 95%;
    margin: 10px;
  }
  
  .product-popup__header,
  .product-popup__body {
    padding: 15px;
  }
  
  .product-popup__title {
    font-size: 18px;
    position: static;
    margin: 10px 0;
  }
  
  .product-popup__price {
    position: static;
    margin: 10px 0;
  }
  
  .product-popup__image {
    position: static;
    width: 100%;
    height: 200px;
    margin-bottom: 15px;
  }
  
  .size-selector {
    position: static;
    margin: 15px 0;
  }
  
  .variant-group__options {
    gap: 8px;
  }
  
  .variant-option {
    padding: 10px 15px;
    font-size: 13px;
  }
  
  .product-popup__add-to-cart {
    position: static;
    width: 100%;
    margin-top: 20px;
  }
}
</style>

<div class="product-grid">
  <h2 class="product-grid__title">{{ section.settings.title }}</h2>
  
  <div class="product-grid__items">
    {% for block in section.blocks %}
      {% if block.settings.product != blank %}
        {% assign product = all_products[block.settings.product] %}
        <div class="product-item" 
             data-product-id="{{ product.id }}" 
             data-product-handle="{{ product.handle }}"
             data-block-id="{{ block.id }}">
          
          {% if product.featured_image %}
            <img 
              src="{{ product.featured_image | image_url: width: 700, height: 700, crop: 'center' }}"
              alt="{{ product.title }}"
              class="product-item__image"
              loading="lazy"
            >
          {% else %}
            <div class="product-item__image" style="background: #f5f5f5; display: flex; align-items: center; justify-content: center; color: #999;">
              No Image
            </div>
          {% endif %}
          
          <div class="product-item__info">
            <h3 class="product-item__title">{{ product.title }}</h3>
            <div class="product-item__price">
              {{ product.price | money }}
              {% if product.compare_at_price > product.price %}
                <span style="text-decoration: line-through; opacity: 0.7; margin-left: 8px;">
                  {{ product.compare_at_price | money }}
                </span>
              {% endif %}
            </div>
          </div>
          
          <button class="quick-view-button" aria-label="Quick view {{ product.title }}">
            <svg viewBox="0 0 24 24" fill="none">
              <path d="M12 5v14M5 12h14"/>
            </svg>
          </button>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</div>

<!-- Popup Overlay -->
<div class="product-popup-overlay" id="productPopupOverlay">
  <div class="product-popup">
    <!-- Loading State -->
    <div class="product-popup__loading" id="popupLoading">
      Loading product...
    </div>
      <!-- Product Content -->
    <div class="product-popup__content" id="popupContent" style="display: none;">
      <div class="product-popup__header">
        <button class="product-popup__close" aria-label="Close popup"></button>
        <div class="product-popup__image"></div>
        <h3 class="product-popup__title"></h3>
        <div class="product-popup__price"></div>
      </div>
      
      <div class="product-popup__body">
        <div class="product-popup__description"></div>
        <div class="product-popup__variants" id="popupVariants"></div>
        <div class="size-selector">
          <label class="size-selector__label">Size</label>
          <div class="size-selector__dropdown">
            <span class="size-selector__selected">Choose your size</span>
            <div class="size-selector__arrow"></div>
          </div>          <!-- Added dynamic size list container -->
          <div class="size-selector__list"></div>
        </div>
        <button class="product-popup__add-to-cart">
          ADD TO CART
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path d="M5 12h14M12 5l7 7-7 7"/>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
(function() {
  'use strict';
  
  class ProductPopupManager {    constructor() {
      try {
        this.overlay = document.getElementById('productPopupOverlay');
        this.popup = this.overlay.querySelector('.product-popup');
        this.loading = document.getElementById('popupLoading');
        this.content = document.getElementById('popupContent');
        this.closeBtn = this.overlay.querySelector('.product-popup__close');
        this.addToCartBtn = this.overlay.querySelector('.product-popup__add-to-cart');
        this.variantsContainer = document.getElementById('popupVariants');
        
        // Added size dropdown refs with error checking
        this.sizeSelector = this.overlay.querySelector('.size-selector');
        if (!this.sizeSelector) {
          console.error('Size selector not found');
          return;
        }
        
        this.sizeDropdown = this.sizeSelector.querySelector('.size-selector__dropdown');
        this.sizeSelectedText = this.sizeSelector.querySelector('.size-selector__selected');
        this.sizeList = this.sizeSelector.querySelector('.size-selector__list');
        
        if (!this.sizeDropdown || !this.sizeSelectedText || !this.sizeList) {
          console.error('Size dropdown elements not found:', {
            dropdown: !!this.sizeDropdown,
            selectedText: !!this.sizeSelectedText,
            list: !!this.sizeList
          });
        }
        
        this.sizeOptionName = null;
        this.sizeValues = [];
        this.selectedSize = null;
        
        this.currentProduct = null;
        this.selectedVariant = null;
        this.winterJacketProduct = {{ section.settings.winter_jacket | json }};
        
        this.init();
      } catch (error) {
        console.error('Error initializing ProductPopupManager:', error);
      }
    }
    
    init() {
      this.bindEvents();
      console.log('ProductPopupManager initialized');
    }
    
    bindEvents() {      // Quick view button clicks
      document.addEventListener('click', (e) => {
        const quickViewBtn = e.target.closest('.quick-view-button');
        if (quickViewBtn) {
          e.preventDefault();
          e.stopPropagation();
          
          const productItem = quickViewBtn.closest('.product-item');
          if (productItem) {
            const productHandle = productItem.dataset.productHandle;
            console.log('Quick view clicked for:', productHandle);
            
            if (!productHandle) {
              console.error('No product handle found on product item');
              return;
            }
            
            this.openProductPopup(productHandle);
          } else {
            console.error('Product item not found');
          }
        }
      });
      
      // Close popup
      if (this.closeBtn) {
        this.closeBtn.addEventListener('click', () => this.closePopup());
      }
      
      // Close on overlay click
      if (this.overlay) {
        this.overlay.addEventListener('click', (e) => {
          if (e.target === this.overlay) {
            this.closePopup();
          }
        });
      }
      
      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.overlay && this.overlay.classList.contains('active')) {
          this.closePopup();
        }
      });
      
      // Add to cart
      if (this.addToCartBtn) {
        this.addToCartBtn.addEventListener('click', () => this.handleAddToCart());
      }
      
      // Size dropdown toggle
      if (this.sizeDropdown) {
        this.sizeDropdown.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          console.log('Size dropdown clicked');
          this.toggleSizeDropdown();
        });
      }
      
      // Close size list when clicking outside
      document.addEventListener('click', (e) => {
        if (this.sizeSelector && !this.sizeSelector.contains(e.target) && this.sizeSelector.classList.contains('open')) {
          this.closeSizeDropdown();
        }
      });}
      async openProductPopup(productHandle) {
      console.log('=== OPENING POPUP ===');
      console.log('Product handle:', productHandle);
      console.log('Overlay element:', this.overlay);
      console.log('Loading element:', this.loading);
      console.log('Content element:', this.content);
      
      if (!productHandle) {
        console.error('No product handle provided');
        return;
      }
      
      if (!this.overlay) {
        console.error('Overlay element not found');
        return;
      }
      
      this.showLoading();
      this.overlay.classList.add('active');
      console.log('Popup overlay activated, classes:', this.overlay.classList.toString());
      
      try {
        console.log('Fetching product:', productHandle);
        const response = await fetch(`/products/${productHandle}.js`);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const product = await response.json();
        console.log('Product fetched successfully:', product.title);
        console.log('Product variants:', product.variants.length);
        
        this.currentProduct = product;
        this.selectedVariant = product.variants[0];
        
        this.renderProduct(product);
        this.hideLoading();
        
      } catch (error) {
        console.error('Error fetching product:', error);
        this.hideLoading();
        this.closePopup();
        alert('Sorry, there was an error loading the product. Please try again.');
      }
    }renderProduct(product) {
      // Set product info
      this.content.querySelector('.product-popup__title').textContent = product.title;
      
      // Use the first variant's price initially
      const initialPrice = product.variants && product.variants.length > 0 
        ? product.variants[0].price 
        : product.price;
      this.content.querySelector('.product-popup__price').textContent = this.formatMoney(initialPrice);
      
      // Hide description to match Figma design
      const description = this.content.querySelector('.product-popup__description');
      description.style.display = 'none';      // Set product image with better error handling
      const imageContainer = this.content.querySelector('.product-popup__image');
      console.log('=== IMAGE DEBUG ===');
      console.log('Product object:', product);
      console.log('Featured image:', product.featured_image);
      console.log('All images:', product.images);
      
      // Clear any existing content
      imageContainer.innerHTML = '';
      imageContainer.style.backgroundImage = '';
      imageContainer.style.backgroundColor = '';
      
      let imageUrl = null;
      if (product.featured_image) {
        imageUrl = product.featured_image;
        console.log('Using featured image:', imageUrl);
      } else if (product.images && product.images.length > 0) {
        imageUrl = product.images[0];
        console.log('Using first image:', imageUrl);
      }
      
      if (imageUrl) {
        // Create an actual img element instead of using background-image
        const img = document.createElement('img');
        img.src = imageUrl;
        img.alt = product.title || 'Product image';
        img.style.cssText = `
          width: 100%;
          height: 100%;
          object-fit: cover;
          border-radius: 8px;
        `;
        
        // Add error handling for image loading
        img.onerror = function() {
          console.log('Image failed to load:', imageUrl);
          imageContainer.innerHTML = '<div style="display: flex; align-items: center; justify-content: center; height: 100%; background: #f5f5f5; color: #999; font-size: 14px; border-radius: 8px;">Image not available</div>';
        };
        
        img.onload = function() {
          console.log('Image loaded successfully:', imageUrl);
        };
        
        imageContainer.appendChild(img);
        console.log('Image element created and added to container');
      } else {
        console.log('No images found, using placeholder');
        imageContainer.innerHTML = '<div style="display: flex; align-items: center; justify-content: center; height: 100%; background: #f5f5f5; color: #999; font-size: 14px; border-radius: 8px;">No Image Available</div>';
      }
      
      // Render variants
      this.renderVariants(product);
      // Build size dropdown (after variant groups rendered)
      this.buildSizeDropdown(product);
      // Update add to cart button
      this.updateAddToCartButton();
    }    renderVariants(product) {
      this.variantsContainer.innerHTML = '';
      if (!product || !product.variants) return;
      
      console.log('Product options:', product.options);
      
      // Determine size option name (case-insensitive) - handle both string and object options
      this.sizeOptionName = product.options.find(o => {
        if (typeof o === 'string') {
          return o.toLowerCase() === 'size';
        } else if (o && typeof o === 'object' && o.name) {
          return o.name.toLowerCase() === 'size';
        }
        return false;
      });
      
      // Extract the actual option name string
      if (this.sizeOptionName && typeof this.sizeOptionName === 'object') {
        this.sizeOptionName = this.sizeOptionName.name;
      }
      
      console.log('Size option name found:', this.sizeOptionName);        // Group variants by options excluding size (handled separately)
      const optionGroups = {};
      console.log('All product variants:', product.variants);
      
      product.variants.forEach((variant, variantIndex) => {
        console.log(`Variant ${variantIndex}:`, variant.options);
        variant.options.forEach((option, index) => {
          const optionName = product.options[index];
          // Get the actual option name string
          const actualOptionName = typeof optionName === 'object' && optionName.name ? optionName.name : optionName;
          
          console.log(`Option ${index}: name="${actualOptionName}", value="${option}"`);
          
          // Skip size option as it will be handled by dropdown
          if (this.sizeOptionName && actualOptionName.toLowerCase() === 'size') {
            console.log('Skipping size option:', actualOptionName);
            return;
          }
          if (!optionGroups[actualOptionName]) optionGroups[actualOptionName] = new Set();
          optionGroups[actualOptionName].add(option);
        });
      });
        console.log('Option groups (excluding size):', optionGroups);
      
      // Only create variant groups if there are non-size options
      Object.entries(optionGroups).forEach(([optionName, values]) => {
        if (values.size === 0) return; // Skip empty option groups
        
        const group = document.createElement('div');
        group.className = 'variant-group';
        const label = document.createElement('label');
        label.className = 'variant-group__label';
        label.textContent = optionName;
        const options = document.createElement('div');
        options.className = 'variant-group__options';
        options.dataset.optionName = optionName;
        
        // Convert Set to Array and create buttons
        Array.from(values).forEach((value, index) => {
          const option = document.createElement('button');
          option.className = 'variant-option';
          option.textContent = value;
          option.dataset.value = value;
          option.type = 'button';
          option.addEventListener('click', () => this.selectOption(optionName, value, option));
          options.appendChild(option);
          
          // Select first option by default
          if (index === 0) {
            option.classList.add('selected');
          }
        });
        
        group.appendChild(label);
        group.appendChild(options);
        this.variantsContainer.appendChild(group);
      });
      this.updateSelectedVariant();
    }    buildSizeDropdown(product) {
      console.log('Building size dropdown, sizeOptionName:', this.sizeOptionName);
      console.log('Product options available:', product.options);
      
      if (!this.sizeOptionName) {
        this.sizeSelector.style.display = 'none';
        console.log('No size option found, hiding selector');
        return;
      }
      
      this.sizeSelector.style.display = '';
      
      // Find the index of the size option - handle both string and object options
      let sizeIndex = -1;
      product.options.forEach((opt, idx) => {
        const optName = typeof opt === 'object' && opt.name ? opt.name : opt;
        if (optName && optName.toLowerCase() === this.sizeOptionName.toLowerCase()) {
          sizeIndex = idx;
        }
      });
      
      console.log('Size index:', sizeIndex);
      
      if (sizeIndex === -1) {
        this.sizeSelector.style.display = 'none';
        console.log('Size option index not found, hiding selector');
        return;
      }
      
      const sizesSet = new Set();
      product.variants.forEach(v => {
        if (v.options && v.options[sizeIndex]) {
          sizesSet.add(v.options[sizeIndex]);
        }
      });
      this.sizeValues = Array.from(sizesSet).filter(v => v && v.trim() !== '');
      
      console.log('Size values found:', this.sizeValues);
      
      if (this.sizeValues.length === 0) {
        this.sizeSelector.style.display = 'none';
        console.log('No valid size values found, hiding selector');
        return;
      }
      
      this.sizeList.innerHTML = '';
      this.sizeValues.forEach((val, idx) => {
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.className = 'size-selector__item';
        btn.textContent = val;
        btn.dataset.value = val;
        btn.addEventListener('click', () => this.selectSize(val, btn));
        this.sizeList.appendChild(btn);        if (idx === 0) {
          btn.classList.add('selected');
          this.selectedSize = val;
          this.sizeSelectedText.textContent = val;
          console.log('Selected first size:', val);
        }
      });
      
      // Make sure dropdown shows the selected size
      if (this.sizeValues.length > 0) {
        this.sizeSelectedText.textContent = this.sizeValues[0];
        this.selectedSize = this.sizeValues[0];
      }
      this.updateSelectedVariant();
    }    toggleSizeDropdown() {
      console.log('Toggle size dropdown, currently open:', this.sizeSelector.classList.contains('open'));
      if (this.sizeSelector.classList.contains('open')) {
        this.closeSizeDropdown();
      } else {
        console.log('Opening size dropdown, size values:', this.sizeValues);
        this.sizeSelector.classList.add('open');
        this.sizeList.style.display = 'block';
        
        // Add click outside to close functionality
        setTimeout(() => {
          document.addEventListener('click', this.handleClickOutside.bind(this), { once: true });
        }, 100);
      }
    }

    handleClickOutside(event) {
      if (!this.sizeSelector.contains(event.target)) {
        this.closeSizeDropdown();
      }
    }closeSizeDropdown() {
      this.sizeSelector.classList.remove('open');
      this.sizeList.style.display = 'none';
    }

    selectSize(value, btn) {
      this.selectedSize = value;
      this.sizeSelectedText.textContent = value;
      this.sizeList.querySelectorAll('.size-selector__item').forEach(i => i.classList.remove('selected'));
      btn.classList.add('selected');
      this.closeSizeDropdown();
      this.updateSelectedVariant();
    }
    
    selectOption(optionName, value, clickedElement) {
      // Remove selected class from siblings
      const siblings = clickedElement.parentElement.querySelectorAll('.variant-option');
      siblings.forEach(sibling => sibling.classList.remove('selected'));
      
      // Add selected class to clicked option
      clickedElement.classList.add('selected');
      
      // Update selected variant
      this.updateSelectedVariant();
    }
      updateSelectedVariant() {
      if (!this.currentProduct || !this.currentProduct.variants) return;
      const selectionsByOption = this.currentProduct.options.map((optName, idx) => {
        // Get the actual option name string
        const actualOptionName = typeof optName === 'object' && optName.name ? optName.name : optName;
        
        if (this.sizeOptionName && actualOptionName === this.sizeOptionName) {
          return this.selectedSize || (this.sizeValues[0] || null);
        }
        const group = this.variantsContainer.querySelector(`.variant-group__options[data-option-name="${actualOptionName}"]`);
        const sel = group ? group.querySelector('.variant-option.selected') : null;
        return sel ? sel.dataset.value : null;
      });
      this.selectedVariant = this.currentProduct.variants.find(v => v.options.every((opt, idx) => !selectionsByOption[idx] || selectionsByOption[idx] === opt)) || this.currentProduct.variants[0];
      this.content.querySelector('.product-popup__price').textContent = this.formatMoney(this.selectedVariant.price);
      this.updateAddToCartButton();
    }
    
    updateAddToCartButton() {
      const btn = this.addToCartBtn;
      
      if (this.selectedVariant && this.selectedVariant.available) {
        btn.disabled = false;
        btn.innerHTML = `
          ADD TO CART
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path d="M5 12h14M12 5l7 7-7 7"/>
          </svg>
        `;
        btn.style.opacity = '1';
      } else {
        btn.disabled = true;
        btn.textContent = 'SOLD OUT';
        btn.style.opacity = '0.6';
      }
    }
    
    async handleAddToCart() {
      if (!this.selectedVariant || !this.selectedVariant.available) {
        console.log('No variant selected or variant unavailable');
        return;
      }
      
      try {
        console.log('Adding to cart:', this.selectedVariant.id);
        
        // Add main product
        await this.addToCart(this.selectedVariant.id, 1);
        
        // Check for winter jacket auto-add logic
        const selectedOptions = [];
        this.variantsContainer.querySelectorAll('.variant-option.selected').forEach(option => {
          selectedOptions.push(option.dataset.value);
        });
        
        if ((selectedOptions.includes('Black') || selectedOptions.includes('Medium')) && this.winterJacketProduct) {
          console.log('Auto-adding winter jacket');
          if (this.winterJacketProduct.variants && this.winterJacketProduct.variants.length > 0) {
            await this.addToCart(this.winterJacketProduct.variants[0].id, 1);
          }
        }
        
        // Close popup and refresh cart
        this.closePopup();
        document.dispatchEvent(new CustomEvent('cart:refresh'));
        
        // Show success message (you can implement a toast here)
        console.log('Product added to cart successfully');
        
      } catch (error) {
        console.error('Error adding to cart:', error);
        alert('Sorry, there was an error adding the product to cart. Please try again.');
      }
    }
    
    async addToCart(variantId, quantity) {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          id: variantId,
          quantity: quantity
        })
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to add to cart: ${errorText}`);
      }
      
      return response.json();
    }
    
    formatMoney(cents) {
      return (cents / 100).toLocaleString('en-US', {
        style: 'currency',
        currency: 'USD'
      });
    }
    
    showLoading() {
      this.loading.classList.add('active');
      this.content.style.display = 'none';
    }
    
    hideLoading() {
      this.loading.classList.remove('active');
      this.content.style.display = 'block';
    }
      closePopup() {
      this.overlay.classList.remove('active');
      document.body.style.overflow = '';
      
      // Reset content after animation
      setTimeout(() => {
        if (!this.overlay.classList.contains('active')) {
          this.variantsContainer.innerHTML = '';
          this.currentProduct = null;
          this.selectedVariant = null;
          this.selectedSize = null;
          this.sizeOptionName = null;
          this.sizeValues = [];
          if (this.sizeList) this.sizeList.innerHTML = '';
          this.sizeSelectedText.textContent = 'Choose your size';
          this.sizeSelector.classList.remove('open');
          this.sizeSelector.style.display = 'none';
        }
      }, 300);
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ProductPopupManager();
    });
  } else {
    new ProductPopupManager();
  }
})();
</script>
