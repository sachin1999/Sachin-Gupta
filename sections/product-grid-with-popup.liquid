
image.png
image.png

{% schema %} { "name": "Gift Guide Banner", "settings": [ { "type": "text", "id": "title", "label": "Title", "default": "TISSO VISION" }, { "type": "text", "id": "header_text", "label": "Header Text", "default": "Find the

pasted


{% schema %} { "name": "Product Grid with Popup", "settings": [ { "type": "text", "id": "title", "label": "Section Title", "default": "Tisso vison in the wild" }, { "type": "collection", "id": "collection", "label": "Collection"

pasted


{{ 'component-card.css' | asset_url | stylesheet_tag }} <style> .gift-guide-grid { padding: 4rem 2rem; max-width: 1400px; margin: 0 auto; } .gift-guide-grid__title { font-size: 2rem; text-align: center; margin-bottom: 3rem; } .gift-guide-grid__container { display: gr

pasted

This is figma and in shopify it is like this fix this

Looking at your Figma design and the Shopify implementation, I can see several layout and styling issues that need to be fixed. Let me create an updated version of your Gift Guide Banner section that matches the Figma design more closely.


Fixed Gift Guide Banner - Shopify Section
Code 
The key fixes I've made to match your Figma design:

Main Issues Fixed:
Layout Structure: Created proper sections (header, main content, footer) that match the Figma layout
Typography: Used the correct Jost font family with proper weights and sizes
Positioning: Fixed the absolute positioning of text content in the bottom-left as shown in Figma
Image Placement: Positioned the SVG illustration on the right side of the content area
Color Scheme: Applied the correct background colors (
#F5F5F5 for header/footer, 
#FFFFFF for main, 
#FFF544 for buttons)
Button Styling: Fixed button dimensions and hover effects to match the design
Responsive Design: Added proper mobile breakpoints for different screen sizes
Key Changes:
Header: Properly spaced logo, centered text, and right-aligned button
Main Content: Text positioned bottom-left, image positioned right with proper sizing
Typography: Correct font sizes (70px for title, 20px for description, etc.)
Spacing: Proper margins and padding to match the Figma measurements
Mobile Responsiveness: Stack layout vertically on smaller screens
Replace your existing Gift Guide Banner section code with this updated version, and it should match your Figma design much more closely. The layout will now properly position the text content in the bottom-left corner with the illustration on the right side, just like in your design.




image.png
image.png
now fix other files in this code just increse the image size let me show you the output while click on + icon Pop for add cart in not open

Looking at the issue, I can see that the popup isn't opening when clicking the + icon. The problem is in the JavaScript code and the popup styling. Let me fix the Product Grid with Popup section:


Fixed Product Grid with Popup - Shopify Section
Code 
Now let me also fix the Gift Guide Grid section to make sure the popup functionality works properly there as well:


Fixed Gift Guide Grid - Shopify Section
Code 



Continue


Fixed Gift Guide Grid - Shopify Section
Code 
Key Fixes Made:
1. Product Grid with Popup Section:
Increased image size: Changed height from 444px to 500px
Fixed popup functionality:
Added proper z-index (9999) for popup overlay
Fixed JavaScript event handling with proper error catching
Added smooth transitions and better styling
Used data-product-handle instead of just ID for better fetching
Enhanced quick-add button:
Increased size from 22px to 40px
Added hover effects and better visibility
Only shows on hover (except mobile)
Improved popup styling:
Better positioning and sizing
Proper variant selection logic
Enhanced mobile responsiveness
2. **



{{ 'component-card.css' | asset_url | stylesheet_tag }}

<style>
@import url('https://fonts.googleapis.com/css2?family=Jost:wght@400;500;600&display=swap');

.gift-guide-grid {
  padding: 4rem 2rem;
  max-width: 1400px;
  margin: 0 auto;
  font-family: 'Jost', sans-serif;
}

.gift-guide-grid__title {
  font-size: 2rem;
  text-align: center;
  margin-bottom: 3rem;
  color: #000;
  font-weight: 500;
}

.gift-guide-grid__container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2rem;
}

.gift-guide-product {
  position: relative;
  cursor: pointer;
  overflow: hidden;
}

.gift-guide-product__image {
  width: 100%;
  height: 500px; /* Increased from 400px */
  object-fit: cover;
  transition: transform 0.3s ease;
}

.gift-guide-product:hover .gift-guide-product__image {
  transform: scale(1.05);
}

.gift-guide-product__quick-add {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: rgba(255, 255, 255, 0.95);
  border: none;
  width: 40px; /* Increased from 30px */
  height: 40px; /* Increased from 30px */
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  z-index: 10;
  box-shadow: 0 2px 10px rgba(0,0,0,0.2);
  opacity: 0;
  visibility: hidden;
}

.gift-guide-product:hover .gift-guide-product__quick-add {
  opacity: 1;
  visibility: visible;
}

.gift-guide-product__quick-add:hover {
  background: #FFF544;
  transform: scale(1.1);
}

.gift-guide-product__quick-add svg {
  width: 20px;
  height: 20px;
  stroke: currentColor;
  stroke-width: 2;
}

.gift-guide-popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgba(0, 0, 0, 0.6);
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.gift-guide-popup.active {
  display: flex;
  opacity: 1;
  visibility: visible;
}

.gift-guide-popup__content {
  position: relative;
  width: 400px; /* Increased from 311px */
  max-height: 80vh;
  background: #FFFFFF;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  border: 0.5px solid #000000;
  padding: 30px;
  overflow-y: auto;
  font-family: 'Jost', sans-serif;
  border-radius: 8px;
}

.gift-guide-popup__close {
  position: absolute;
  top: 15px;
  right: 15px;
  background: none;
  border: none;
  cursor: pointer;
  font-size: 24px;
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: background 0.3s ease;
}

.gift-guide-popup__close:hover {
  background: #f0f0f0;
}

.gift-guide-popup__title {
  font-size: 24px;
  margin-bottom: 15px;
  color: #000;
  font-weight: 500;
  padding-right: 40px;
}

.gift-guide-popup__price {
  font-size: 20px;
  margin-bottom: 20px;
  color: #000;
  font-weight: 500;
}

.gift-guide-popup__description {
  margin-bottom: 25px;
  line-height: 1.5;
  color: #666;
}

.gift-guide-popup__variants {
  margin-bottom: 25px;
}

.gift-guide-popup__variant-label {
  font-size: 14px;
  color: #333333;
  font-weight: 500;
  margin-bottom: 8px;
  display: block;
}

.gift-guide-popup__variant-select {
  width: 100%;
  border: 0.5px solid #000000;
  font-size: 16px;
  font-family: 'Jost', sans-serif;
  color: #000;
  margin-bottom: 16px;
  background: #fff;
  padding: 10px;
  border-radius: 4px;
}

.gift-guide-popup__variant-select:focus {
  outline: none;
  border-color: #FFF544;
}

.gift-guide-popup__add-to-cart {
  width: 100%;
  height: 50px;
  background: #000000;
  color: #fff;
  border: none;
  font-family: 'Jost', sans-serif;
  font-size: 16px;
  font-weight: 500;
  text-transform: uppercase;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  transition: all 0.3s ease;
  cursor: pointer;
  border-radius: 4px;
}

.gift-guide-popup__add-to-cart:hover {
  background: #FFF544;
  color: #000;
}

.gift-guide-popup__add-to-cart:disabled {
  background: #ccc;
  cursor: not-allowed;
}

.gift-guide-popup__add-to-cart svg {
  width: 16px;
  height: 16px;
}

@media screen and (max-width: 968px) {
  .gift-guide-grid__container {
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
  }
  
  .gift-guide-product__image {
    height: 400px;
  }
  
  .gift-guide-popup__content {
    width: 90%;
    max-width: 400px;
    padding: 25px;
  }
}

@media screen and (max-width: 568px) {
  .gift-guide-grid__container {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  .gift-guide-grid {
    padding: 2rem 1rem;
  }
  
  .gift-guide-grid__title {
    font-size: 1.5rem;
  }
  
  .gift-guide-product__image {
    height: 350px;
  }
  
  .gift-guide-product__quick-add {
    opacity: 1;
    visibility: visible;
  }
  
  .gift-guide-popup__content {
    width: 95%;
    padding: 20px;
  }
  
  .gift-guide-popup__title {
    font-size: 20px;
  }
}
</style>

<div class="gift-guide-grid">
  <h2 class="gift-guide-grid__title">{{ section.settings.title }}</h2>
  <div class="gift-guide-grid__container">
    {%- for block in section.blocks -%}
      {%- assign product = all_products[block.settings.product] -%}
      {%- if product -%}
        <div class="gift-guide-product" data-product-id="{{ product.id }}" data-product-handle="{{ product.handle }}">
          <img
            src="{{ product.featured_image | img_url: '700x700', crop: 'center' }}"
            alt="{{ product.title }}"
            class="gift-guide-product__image"
            loading="lazy"
          >
          <button class="gift-guide-product__quick-add" aria-label="Quick view {{ product.title }}">
            <svg viewBox="0 0 24 24" fill="none">
              <path d="M12 5v14M5 12h14"/>
            </svg>
          </button>
        </div>
      {%- endif -%}
    {%- endfor -%}
  </div>
</div>

<div class="gift-guide-popup" role="dialog" aria-modal="true" id="giftGuidePopup">
  <div class="gift-guide-popup__content">
    <button class="gift-guide-popup__close" aria-label="Close">&times;</button>
    <h3 class="gift-guide-popup__title"></h3>
    <div class="gift-guide-popup__price"></div>
    <div class="gift-guide-popup__description"></div>
    <div class="gift-guide-popup__variants"></div>
    <button class="gift-guide-popup__add-to-cart">
      ADD TO CART
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <path d="M5 12h14M12 5l7 7-7 7"/>
      </svg>
    </button>
  </div>
</div>

<script>
class GiftGuideProduct {
  constructor() {
    this.popup = document.getElementById('giftGuidePopup');
    this.popupContent = this.popup.querySelector('.gift-guide-popup__content');
    this.closeButton = this.popup.querySelector('.gift-guide-popup__close');
    this.addToCartButton = this.popup.querySelector('.gift-guide-popup__add-to-cart');
    this.currentProduct = null;
    this.selectedVariant = null;
    
    this.init();
  }

  init() {
    this.bindEvents();
  }

  bindEvents() {
    // Add click events to quick-add buttons
    document.querySelectorAll('.gift-guide-product__quick-add').forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const productItem = e.target.closest('.gift-guide-product');
        const productHandle = productItem.dataset.productHandle;
        
        this.handleQuickAdd(productHandle);
      });
    });

    // Close popup events
    this.closeButton.addEventListener('click', () => this.closePopup());
    
    this.popup.addEventListener('click', (e) => {
      if (e.target === this.popup) this.closePopup();
    });
    
    // Escape key to close
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && this.popup.classList.contains('active')) {
        this.closePopup();
      }
    });
    
    // Add to cart functionality
    this.addToCartButton.addEventListener('click', () => this.handleAddToCart());
  }

  async handleQuickAdd(productHandle) {
    try {
      const response = await fetch(`/products/${productHandle}.js`);
      if (!response.ok) {
        throw new Error('Failed to fetch product');
      }
      
      const product = await response.json();
      this.currentProduct = product;
      this.renderPopup(product);
      this.openPopup();
    } catch (error) {
      console.error('Error fetching product:', error);
    }
  }

  renderPopup(product) {
    this.popupContent.querySelector('.gift-guide-popup__title').textContent = product.title;
    this.popupContent.querySelector('.gift-guide-popup__price').textContent = this.formatMoney(product.price);
    this.popupContent.querySelector('.gift-guide-popup__description').innerHTML = product.description || '';

    this.renderVariants(product);
    
    // Set default selected variant
    this.selectedVariant = product.variants[0];
    this.updateAddToCartButton();
  }

  renderVariants(product) {
    const variantsContainer = this.popupContent.querySelector('.gift-guide-popup__variants');
    variantsContainer.innerHTML = '';

    if (product.variants.length <= 1) {
      return; // No variants to show
    }

    product.options_with_values.forEach((option, index) => {
      const container = document.createElement('div');
      
      const label = document.createElement('label');
      label.className = 'gift-guide-popup__variant-label';
      label.textContent = option.name;
      
      const select = document.createElement('select');
      select.className = 'gift-guide-popup__variant-select';
      select.dataset.option = option.name.toLowerCase();
      select.dataset.optionIndex = index;
      
      option.values.forEach(value => {
        const optionElement = document.createElement('option');
        optionElement.value = value;
        optionElement.textContent = value;
        select.appendChild(optionElement);
      });

      // Add change event listener
      select.addEventListener('change', () => this.updateSelectedVariant());

      container.appendChild(label);
      container.appendChild(select);
      variantsContainer.appendChild(container);
    });
    
    // Set initial variant
    this.updateSelectedVariant();
  }

  updateSelectedVariant() {
    const variantSelects = this.popupContent.querySelectorAll('.gift-guide-popup__variant-select');
    const selectedOptions = Array.from(variantSelects).map(select => select.value);

    // Find the matching variant
    this.selectedVariant = this.currentProduct.variants.find(variant => {
      return variant.options.every((option, index) => {
        return selectedOptions.length === 0 || selectedOptions[index] === option;
      });
    });

    if (!this.selectedVariant) {
      this.selectedVariant = this.currentProduct.variants[0];
    }

    // Update price
    this.popupContent.querySelector('.gift-guide-popup__price').textContent = 
      this.formatMoney(this.selectedVariant.price);

    this.updateAddToCartButton();
  }

  updateAddToCartButton() {
    const button = this.popupContent.querySelector('.gift-guide-popup__add-to-cart');
    
    if (this.selectedVariant && this.selectedVariant.available) {
      button.innerHTML = `
        ADD TO CART
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path d="M5 12h14M12 5l7 7-7 7"/>
        </svg>
      `;
      button.disabled = false;
      button.style.opacity = '1';
    } else {
      button.textContent = 'SOLD OUT';
      button.disabled = true;
      button.style.opacity = '0.6';
    }
  }

  async handleAddToCart() {
    if (!this.selectedVariant) return;

    try {
      await this.addItemToCart(this.selectedVariant.id, 1);

      // Special logic: if Black or Medium is selected, add Soft Winter Jacket
      const selectedOptions = Array.from(this.popupContent.querySelectorAll('.gift-guide-popup__variant-select'))
        .map(select => select.value);
      
      if (selectedOptions.includes('Black') || selectedOptions.includes('Medium')) {
        // Get Soft Winter Jacket variant ID from section settings
        const winterJacketProduct = {{ section.settings.winter_jacket | json }};
        if (winterJacketProduct && winterJacketProduct.variants && winterJacketProduct.variants.length > 0) {
          await this.addItemToCart(winterJacketProduct.variants[0].id, 1);
        }
      }

      this.closePopup();
      document.dispatchEvent(new CustomEvent('cart:refresh'));
      this.showSuccessMessage('Product added to cart!');
    } catch (error) {
      console.error('Error adding to cart:', error);
      this.showErrorMessage('Failed to add product to cart');
    }
  }

  async addItemToCart(variantId, quantity) {
    const response = await fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        id: variantId,
        quantity: quantity
      })
    });

    if (!response.ok) {
      throw new Error('Failed to add item to cart');
    }
    
    return response.json();
  }

  formatMoney(cents) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(cents / 100);
  }

  openPopup() {
    this.popup.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  closePopup() {
    this.popup.classList.remove('active');
    document.body.style.overflow = '';
  }

  showSuccessMessage(message) {
    // You can implement a toast notification here
    console.log(message);
  }

  showErrorMessage(message) {
    // You can implement an error notification here
    console.error(message);
  }
}

// Initialize the gift guide functionality
document.addEventListener('DOMContentLoaded', () => {
  new GiftGuideProduct();
});
</script>
    

